{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediaContext = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _shallowequal = require('shallowequal');\n\nvar _shallowequal2 = _interopRequireDefault(_shallowequal);\n\nvar _cssMediaquery = require('css-mediaquery');\n\nvar _cssMediaquery2 = _interopRequireDefault(_cssMediaquery);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // this is for server side rendering and does not use window.matchMedia\n\n\nvar hasMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';\n\nvar MediaContext = _react2.default.createContext({});\n\nvar MediaQueryProvider = function (_React$Component) {\n  _inherits(MediaQueryProvider, _React$Component);\n\n  function MediaQueryProvider(props) {\n    _classCallCheck(this, MediaQueryProvider);\n\n    var _this = _possibleConstructorReturn(this, (MediaQueryProvider.__proto__ || Object.getPrototypeOf(MediaQueryProvider)).call(this, props));\n\n    var media = Object.keys(_this.props.queries).reduce(function (acc, queryName) {\n      var query = _this.props.queries[queryName];\n\n      if (_this.props.values) {\n        acc[queryName] = _cssMediaquery2.default.match(query, _this.props.values);\n      } else {\n        // if the consumer has not set `values` and is server rendering, default to false\n        // because we don't know the screen size\n        acc[queryName] = hasMatchMedia ? window.matchMedia(query).matches : false;\n      }\n\n      return acc;\n    }, {});\n    _this.mediaQueryListInstanceMap = new Map();\n    _this.state = {\n      media: media\n    };\n    _this.mediaQueryListener = _this.mediaQueryListener.bind(_this);\n    _this.currentMediaState = _this.state.media;\n    _this.updateState = (0, _utils.debounce)(function (newMedia) {\n      if (!(0, _shallowequal2.default)(newMedia, _this.state.media)) {\n        _this.setState({\n          media: newMedia\n        });\n      }\n    }, 20);\n    return _this;\n  }\n\n  _createClass(MediaQueryProvider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var media = Object.keys(this.props.queries).reduce(function (acc, queryName) {\n        var mediaQueryListInstance = window.matchMedia(_this2.props.queries[queryName]);\n        mediaQueryListInstance.addListener(_this2.mediaQueryListener); // this is so we can keep a reference to the MediaQueryList for removing the listener\n        // and knowing the queryName in `mediaQueryListener`\n\n        _this2.mediaQueryListInstanceMap.set(mediaQueryListInstance.media, {\n          query: mediaQueryListInstance,\n          queryName: queryName\n        });\n\n        acc[queryName] = mediaQueryListInstance.matches;\n        return acc;\n      }, {}); // need to rerender with correct media if it didnt match up with initial\n\n      if (!(0, _shallowequal2.default)(media, this.state.media)) {\n        this.setState({\n          media: media\n        }); // eslint-disable-line react/no-did-mount-set-state\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      this.mediaQueryListInstanceMap.forEach(function (mediaQueryList) {\n        return mediaQueryList.query.removeListener(_this3.mediaQueryListener);\n      });\n    }\n  }, {\n    key: 'mediaQueryListener',\n    value: function mediaQueryListener(_ref) {\n      var matches = _ref.matches,\n          media = _ref.media;\n\n      var _mediaQueryListInstan = this.mediaQueryListInstanceMap.get(media),\n          queryName = _mediaQueryListInstan.queryName;\n\n      this.currentMediaState = _extends({}, this.currentMediaState, _defineProperty({}, queryName, matches));\n      this.updateState(this.currentMediaState);\n    }\n  }, {\n    key: 'children',\n    value: function children() {\n      if (_react2.default.Fragment) {\n        return _react2.default.createElement(_react2.default.Fragment, null, this.props.children);\n      }\n\n      if (_react2.default.Children.count(this.props.children) === 1) {\n        return this.props.children;\n      }\n\n      return _react2.default.createElement('div', null, this.props.children);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(MediaContext.Provider, {\n        value: this.state.media\n      }, this.children());\n    }\n  }]);\n\n  return MediaQueryProvider;\n}(_react2.default.Component);\n\nMediaQueryProvider.propTypes = {\n  children: _propTypes2.default.node.isRequired,\n  queries: _propTypes2.default.object,\n  // eslint-disable-line react/forbid-prop-types\n  values: _propTypes2.default.object // eslint-disable-line react/forbid-prop-types\n\n};\nMediaQueryProvider.defaultProps = {\n  queries: {\n    mobile: 'screen and (max-width: 623px)',\n    tablet: 'screen and (min-width: 624px) and (max-width: 1020px)',\n    desktop: 'screen and (min-width: 1021px) and (max-width: 1440px)',\n    largeDesktop: 'screen and (min-width: 1441px)'\n  },\n  values: {}\n};\nexports.MediaContext = MediaContext;\nexports.default = MediaQueryProvider;","map":null,"metadata":{},"sourceType":"script"}